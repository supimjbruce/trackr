{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getLinkingConfig=exports.getNavigationConfig=void 0;var native_1=require(\"@react-navigation/native\");var expo_modules_core_1=require(\"expo-modules-core\");var getReactNavigationConfig_1=require(\"./getReactNavigationConfig\");var linking_1=require(\"./link/linking\");function getNavigationConfig(routes){var metaOnly=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return(0,getReactNavigationConfig_1.getReactNavigationConfig)(routes,metaOnly);}exports.getNavigationConfig=getNavigationConfig;function getLinkingConfig(store,routes,context){var _ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{},_ref$metaOnly=_ref.metaOnly,metaOnly=_ref$metaOnly===void 0?true:_ref$metaOnly,serverUrl=_ref.serverUrl;var hasCachedInitialUrl=false;var initialUrl;var nativeLinkingKey=context.keys().find(function(key){return key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/);});var nativeLinking=nativeLinkingKey?context(nativeLinkingKey):undefined;return{prefixes:[],config:getNavigationConfig(routes,metaOnly),getInitialURL:function getInitialURL(){if(!hasCachedInitialUrl){if(expo_modules_core_1.Platform.OS==='web'){initialUrl=serverUrl!=null?serverUrl:(0,linking_1.getInitialURL)();}else{initialUrl=serverUrl!=null?serverUrl:(0,linking_1.getInitialURL)();if(typeof initialUrl==='string'){if(typeof(nativeLinking==null?void 0:nativeLinking.redirectSystemPath)==='function'){initialUrl=nativeLinking.redirectSystemPath({path:initialUrl,initial:true});}}else if(initialUrl){initialUrl=initialUrl.then(function(url){if(url&&typeof(nativeLinking==null?void 0:nativeLinking.redirectSystemPath)==='function'){return nativeLinking.redirectSystemPath({path:url,initial:true});}return url;});}}hasCachedInitialUrl=true;}return initialUrl;},subscribe:(0,linking_1.addEventListener)(nativeLinking),getStateFromPath:linking_1.getStateFromPath.bind(store),getPathFromState:function getPathFromState(state,options){var _ref2;return(_ref2=(0,linking_1.getPathFromState)(state,_objectSpread(_objectSpread({screens:{}},this.config),options)))!=null?_ref2:'/';},getActionFromState:native_1.getActionFromState};}exports.getLinkingConfig=getLinkingConfig;","map":{"version":3,"names":["native_1","require","expo_modules_core_1","getReactNavigationConfig_1","linking_1","getNavigationConfig","routes","metaOnly","arguments","length","undefined","getReactNavigationConfig","exports","getLinkingConfig","store","context","_ref","_ref$metaOnly","serverUrl","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","prefixes","config","getInitialURL","Platform","OS","redirectSystemPath","path","initial","then","url","subscribe","addEventListener","getStateFromPath","bind","getPathFromState","state","options","_ref2","_objectSpread","screens","getActionFromState"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { RouterStore } from './global-state/router-store';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState?: typeof getPathFromState;\n  getStateFromPath?: typeof getStateFromPath;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n};\n\nexport function getLinkingConfig(\n  store: RouterStore,\n  routes: RouteNode,\n  context: RequireContext,\n  { metaOnly = true, serverUrl }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: addEventListener(nativeLinking),\n    getStateFromPath: getStateFromPath.bind(store),\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: {},\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}