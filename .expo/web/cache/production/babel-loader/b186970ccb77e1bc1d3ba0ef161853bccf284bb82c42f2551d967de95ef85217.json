{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.adjustPathname=exports.extractExpoPathFromURL=void 0;var Linking=__importStar(require(\"expo-linking\"));function extractExactPathFromURL(url){var _globalThis$expo,_globalThis$expo$modu;if(url.match(/^https?:\\/\\//)){var _URL=new URL(url),origin=_URL.origin,href=_URL.href;return href.replace(origin,'');}var isExpoGo=typeof expo!=='undefined'&&((_globalThis$expo=globalThis.expo)==null?void 0:(_globalThis$expo$modu=_globalThis$expo.modules)==null?void 0:_globalThis$expo$modu.ExpoGo);if(isExpoGo&&url.match(/^exp(s)?:\\/\\//)){var _url$match;var pathname=(_url$match=url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/))==null?void 0:_url$match[1];if(pathname){return fromDeepLink('a://'+pathname);}var res=Linking.parse(url);var qs=!res.queryParams?'':Object.entries(res.queryParams).map(function(_ref){var _ref2=_slicedToArray(_ref,2),k=_ref2[0],v=_ref2[1];return`${k}=${v}`;}).join('&');return adjustPathname({hostname:res.hostname,pathname:res.path||''})+(qs?'?'+qs:'');}return fromDeepLink(url);}function isExpoDevelopmentClient(url){return url.hostname==='expo-development-client';}function fromDeepLink(url){var res;try{res=new URL(url);}catch(_unused){return url;}if(isExpoDevelopmentClient(res)){if(!res.searchParams.get('url')){return'';}var incomingUrl=res.searchParams.get('url');return extractExactPathFromURL(decodeURI(incomingUrl));}var results='';if(res.host){results+=res.host;}if(res.pathname){results+=res.pathname;}var qs=!res.search?'':_toConsumableArray(res.searchParams.entries()).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),k=_ref4[0],v=_ref4[1];return`${k}=${decodeURIComponent(v)}`;}).join('&');if(qs){results+='?'+qs;}return results;}function extractExpoPathFromURL(){var url=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';return extractExactPathFromURL(url).replace(/^\\//,'');}exports.extractExpoPathFromURL=extractExpoPathFromURL;function adjustPathname(url){if(url.hostname==='exp.host'||url.hostname==='u.expo.dev'){return url.pathname.split('/').slice(2).join('/');}return url.pathname;}exports.adjustPathname=adjustPathname;","map":{"version":3,"names":["Linking","__importStar","require","extractExactPathFromURL","url","_globalThis$expo","_globalThis$expo$modu","match","_URL","URL","origin","href","replace","isExpoGo","expo","globalThis","modules","ExpoGo","_url$match","pathname","fromDeepLink","res","parse","qs","queryParams","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","join","adjustPathname","hostname","path","isExpoDevelopmentClient","_unused","searchParams","get","incomingUrl","decodeURI","results","host","search","_toConsumableArray","_ref3","_ref4","decodeURIComponent","extractExpoPathFromURL","arguments","length","undefined","exports","split","slice"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["import * as Linking from 'expo-linking';\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href } = new URL(url);\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1];\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n\n    const res = Linking.parse(url);\n\n    const qs = !res.queryParams\n      ? ''\n      : Object.entries(res.queryParams)\n          .map(([k, v]) => `${k}=${v}`)\n          .join('&');\n    return (\n      adjustPathname({ hostname: res.hostname, pathname: res.path || '' }) + (qs ? '?' + qs : '')\n    );\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  // TODO: We should get rid of this, dropping specificities is not good\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}\n\nexport function adjustPathname(url: { hostname?: string | null; pathname: string }) {\n  if (url.hostname === 'exp.host' || url.hostname === 'u.expo.dev') {\n    // drop the first two segments from pathname:\n    return url.pathname.split('/').slice(2).join('/');\n  }\n  return url.pathname;\n}\n"],"mappings":"wkCAAA,IAAAA,OAAA,CAAAC,YAAA,CAAAC,OAAA,kBAGA,QAAS,CAAAC,uBAAuBA,CAACC,GAAW,MAAAC,gBAAA,CAAAC,qBAAA,CAC1C,GAGEF,GAAG,CAACG,KAAK,CAAC,cAAc,CAAC,CACzB,CACA,IAAAC,IAAA,CAAyB,GAAI,CAAAC,GAAG,CAACL,GAAG,CAAC,CAA7BM,MAAM,CAAAF,IAAA,CAANE,MAAM,CAAEC,IAAI,CAAAH,IAAA,CAAJG,IAAI,CACpB,MAAO,CAAAA,IAAI,CAACC,OAAO,CAACF,MAAM,CAAE,EAAE,CAAC,C,CAGjC,GAAM,CAAAG,QAAQ,CAAG,MAAO,CAAAC,IAAI,GAAK,WAAW,IAAAT,gBAAA,CAAIU,UAAU,CAACD,IAAI,gBAAAR,qBAAA,CAAfD,gBAAA,CAAiBW,OAAO,eAAxBV,qBAAA,CAA0BW,MAAM,EAGhF,GACEJ,QAAQ,EAGRT,GAAG,CAACG,KAAK,CAAC,eAAe,CAAC,CAC1B,KAAAW,UAAA,CACA,GAAM,CAAAC,QAAQ,EAAAD,UAAA,CAAGd,GAAG,CAACG,KAAK,CAAC,yBAAyB,CAAC,eAApCW,UAAA,CAAuC,CAAC,CAAC,CAC1D,GAAIC,QAAQ,CAAE,CACZ,MAAO,CAAAC,YAAY,CAAC,MAAM,CAAGD,QAAQ,CAAC,C,CAGxC,GAAM,CAAAE,GAAG,CAAGrB,OAAO,CAACsB,KAAK,CAAClB,GAAG,CAAC,CAE9B,GAAM,CAAAmB,EAAE,CAAG,CAACF,GAAG,CAACG,WAAW,CACvB,EAAE,CACFC,MAAM,CAACC,OAAO,CAACL,GAAG,CAACG,WAAW,CAAC,CAC5BG,GAAG,CAAC,SAAAC,IAAA,MAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAEG,CAAC,CAAAF,KAAA,IAAEG,CAAC,CAAAH,KAAA,UAAM,GAAGE,CAAC,IAAIC,CAAC,EAAE,GAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC,CAChB,MACE,CAAAC,cAAc,CAAC,CAAEC,QAAQ,CAAEd,GAAG,CAACc,QAAQ,CAAEhB,QAAQ,CAAEE,GAAG,CAACe,IAAI,EAAI,EAAE,CAAE,CAAC,EAAIb,EAAE,CAAG,GAAG,CAAGA,EAAE,CAAG,EAAE,CAAC,C,CAM/F,MAAO,CAAAH,YAAY,CAAChB,GAAG,CAAC,CAC1B,CAGA,QAAS,CAAAiC,uBAAuBA,CAACjC,GAAQ,EACvC,MAAO,CAAAA,GAAG,CAAC+B,QAAQ,GAAK,yBAAyB,CACnD,CAEA,QAAS,CAAAf,YAAYA,CAAChB,GAAW,EAC/B,GAAI,CAAAiB,GAAQ,CACZ,GAAI,CAGFA,GAAG,CAAG,GAAI,CAAAZ,GAAG,CAACL,GAAG,CAAC,C,CAClB,MAAAkC,OAAA,CAAM,CACN,MAAO,CAAAlC,GAAG,C,CAGZ,GAAIiC,uBAAuB,CAAChB,GAAG,CAAC,CAAE,CAChC,GAAI,CAACA,GAAG,CAACkB,YAAY,CAACC,GAAG,CAAC,KAAK,CAAC,CAAE,CAChC,MAAO,EAAE,C,CAEX,GAAM,CAAAC,WAAW,CAAGpB,GAAG,CAACkB,YAAY,CAACC,GAAG,CAAC,KAAK,CAAE,CAChD,MAAO,CAAArC,uBAAuB,CAACuC,SAAS,CAACD,WAAW,CAAC,CAAC,C,CAGxD,GAAI,CAAAE,OAAO,CAAG,EAAE,CAEhB,GAAItB,GAAG,CAACuB,IAAI,CAAE,CACZD,OAAO,EAAItB,GAAG,CAACuB,IAAI,C,CAGrB,GAAIvB,GAAG,CAACF,QAAQ,CAAE,CAChBwB,OAAO,EAAItB,GAAG,CAACF,QAAQ,C,CAGzB,GAAM,CAAAI,EAAE,CAAG,CAACF,GAAG,CAACwB,MAAM,CAClB,EAAE,CAEFC,kBAAA,CAAIzB,GAAG,CAACkB,YAAY,CAACb,OAAO,EAAE,EAAEC,GAAG,CAAC,SAAAoB,KAAA,MAAAC,KAAA,CAAAlB,cAAA,CAAAiB,KAAA,IAAEhB,CAAC,CAAAiB,KAAA,IAAEhB,CAAC,CAAAgB,KAAA,UAAM,GAAGjB,CAAC,IAAIkB,kBAAkB,CAACjB,CAAC,CAAC,EAAE,GAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAE9F,GAAIV,EAAE,CAAE,CACNoB,OAAO,EAAI,GAAG,CAAGpB,EAAE,C,CAGrB,MAAO,CAAAoB,OAAO,CAChB,CAEA,QAAgB,CAAAO,sBAAsBA,CAAA,CAAiB,IAAhB,CAAA9C,GAAA,CAAA+C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAc,EAAE,CAErD,MAAO,CAAAhD,uBAAuB,CAACC,GAAG,CAAC,CAACQ,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CACxD,CAHA0C,OAAA,CAAAJ,sBAAA,CAAAA,sBAAA,CAKA,QAAgB,CAAAhB,cAAcA,CAAC9B,GAAmD,EAChF,GAAIA,GAAG,CAAC+B,QAAQ,GAAK,UAAU,EAAI/B,GAAG,CAAC+B,QAAQ,GAAK,YAAY,CAAE,CAEhE,MAAO,CAAA/B,GAAG,CAACe,QAAQ,CAACoC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACvB,IAAI,CAAC,GAAG,CAAC,C,CAEnD,MAAO,CAAA7B,GAAG,CAACe,QAAQ,CACrB,CANAmC,OAAA,CAAApB,cAAA,CAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}