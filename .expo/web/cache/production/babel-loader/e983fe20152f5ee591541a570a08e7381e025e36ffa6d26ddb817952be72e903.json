{"ast":null,"code":"var disableReactNativeMissingModuleHandling=!false&&(process.env.EXPO_OS!=='web'||typeof window==='undefined');globalThis.__webpack_chunk_load__=function(id){return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);};globalThis.__webpack_require__=function(id){var original=ErrorUtils.reportFatalError;if(disableReactNativeMissingModuleHandling){ErrorUtils.reportFatalError=function(err){throw err;};}try{return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);}finally{if(disableReactNativeMissingModuleHandling){ErrorUtils.reportFatalError=original;}}};","map":{"version":3,"names":["disableReactNativeMissingModuleHandling","process","env","EXPO_OS","window","globalThis","__webpack_chunk_load__","id","global","__METRO_GLOBAL_PREFIX__","__webpack_require__","original","ErrorUtils","reportFatalError","err"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/rsc/runtime.js"],"sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// React Native's error handling is full of bugs which cause the app to crash in production.\n// We'll disable their handling in production native builds to ensure missing modules are shown to the user.\nconst disableReactNativeMissingModuleHandling =\n  !__DEV__ && (process.env.EXPO_OS !== 'web' || typeof window === 'undefined');\n\nglobalThis.__webpack_chunk_load__ = (id) => {\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\n};\n\nglobalThis.__webpack_require__ = (id) => {\n  // This logic can be tested by running a production iOS build without virtual client boundaries. This will result in all split chunks being missing and\n  // errors being thrown on RSC load.\n\n  const original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    ErrorUtils.reportFatalError = (err) => {\n      // Throw the error so the __r function exits as expected. The error will then be caught by the nearest error boundary.\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    // Restore the original error handling.\n    if (disableReactNativeMissingModuleHandling) {\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};\n"],"mappings":"AASA,GAAM,CAAAA,uCAAuC,CAC3C,MAAQ,GAAKC,OAAO,CAACC,GAAG,CAACC,OAAO,GAAK,KAAK,EAAI,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAC,CAE9EC,UAAU,CAACC,sBAAsB,CAAG,SAACC,EAAE,CAAK,CAC1C,MAAO,CAAAC,MAAM,CAAC,GAAGC,uBAAuB,mBAAmB,CAAC,CAACF,EAAE,CAAC,CAClE,CAAC,CAEDF,UAAU,CAACK,mBAAmB,CAAG,SAACH,EAAE,CAAK,CAIvC,GAAM,CAAAI,QAAQ,CAAGC,UAAU,CAACC,gBAAgB,CAC5C,GAAIb,uCAAuC,CAAE,CAC3CY,UAAU,CAACC,gBAAgB,CAAG,SAACC,GAAG,CAAK,CAErC,KAAM,CAAAA,GAAG,CACX,CAAC,CACH,CACA,GAAI,CACF,MAAO,CAAAN,MAAM,CAAC,GAAGC,uBAAuB,KAAK,CAAC,CAACF,EAAE,CAAC,CACpD,CAAC,OAAS,CAER,GAAIP,uCAAuC,CAAE,CAC3CY,UAAU,CAACC,gBAAgB,CAAGF,QAAQ,CACxC,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}