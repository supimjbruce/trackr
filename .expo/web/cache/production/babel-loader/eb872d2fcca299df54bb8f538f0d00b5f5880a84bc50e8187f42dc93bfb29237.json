{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import{useEffect,useState}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import ExpoLinking from'./ExpoLinking';import RNLinking from'./RNLinking';import{parse}from'./createURL';import{validateURL}from'./validateURL';export function addEventListener(type,handler){return RNLinking.addEventListener(type,handler);}export function parseInitialURLAsync(){return _parseInitialURLAsync.apply(this,arguments);}function _parseInitialURLAsync(){_parseInitialURLAsync=_asyncToGenerator(function*(){var initialUrl=yield RNLinking.getInitialURL();if(!initialUrl){return{scheme:null,hostname:null,path:null,queryParams:null};}return parse(initialUrl);});return _parseInitialURLAsync.apply(this,arguments);}export function sendIntent(_x,_x2){return _sendIntent.apply(this,arguments);}function _sendIntent(){_sendIntent=_asyncToGenerator(function*(action,extras){if(\"web\"==='android'){return yield RNLinking.sendIntent(action,extras);}throw new UnavailabilityError('Linking','sendIntent');});return _sendIntent.apply(this,arguments);}export function openSettings(){return _openSettings.apply(this,arguments);}function _openSettings(){_openSettings=_asyncToGenerator(function*(){if(\"web\"==='web'){throw new UnavailabilityError('Linking','openSettings');}if(RNLinking.openSettings){return yield RNLinking.openSettings();}yield openURL('app-settings:');});return _openSettings.apply(this,arguments);}export function getInitialURL(){return _getInitialURL.apply(this,arguments);}function _getInitialURL(){_getInitialURL=_asyncToGenerator(function*(){var _yield$RNLinking$getI;return(_yield$RNLinking$getI=yield RNLinking.getInitialURL())!=null?_yield$RNLinking$getI:null;});return _getInitialURL.apply(this,arguments);}export function getLinkingURL(){return ExpoLinking.getLinkingURL();}export function openURL(_x3){return _openURL.apply(this,arguments);}function _openURL(){_openURL=_asyncToGenerator(function*(url){validateURL(url);return yield RNLinking.openURL(url);});return _openURL.apply(this,arguments);}export function canOpenURL(_x4){return _canOpenURL.apply(this,arguments);}function _canOpenURL(){_canOpenURL=_asyncToGenerator(function*(url){validateURL(url);return yield RNLinking.canOpenURL(url);});return _canOpenURL.apply(this,arguments);}export function useURL(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),url=_useState2[0],setLink=_useState2[1];function onChange(event){setLink(event.url);}useEffect(function(){getInitialURL().then(function(url){return setLink(url);});var subscription=addEventListener('url',onChange);return function(){return subscription.remove();};},[]);return url;}export function useLinkingURL(){var _useState3=useState(ExpoLinking.getLinkingURL),_useState4=_slicedToArray(_useState3,2),url=_useState4[0],setLink=_useState4[1];function onChange(event){setLink(event.url);}useEffect(function(){var subscription=ExpoLinking.addListener('onURLReceived',onChange);return function(){return subscription.remove();};},[]);return url!=null?url:null;}export*from'./Linking.types';export*from'./Schemes';export{parse,createURL}from'./createURL';","map":{"version":3,"names":["UnavailabilityError","useEffect","useState","Platform","ExpoLinking","RNLinking","parse","validateURL","addEventListener","type","handler","parseInitialURLAsync","_parseInitialURLAsync","apply","arguments","_asyncToGenerator","initialUrl","getInitialURL","scheme","hostname","path","queryParams","sendIntent","_x","_x2","_sendIntent","action","extras","openSettings","_openSettings","openURL","_getInitialURL","_yield$RNLinking$getI","getLinkingURL","_x3","_openURL","url","canOpenURL","_x4","_canOpenURL","useURL","_useState","_useState2","_slicedToArray","setLink","onChange","event","then","subscription","remove","useLinkingURL","_useState3","_useState4","addListener","createURL"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-linking/src/Linking.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription, Platform } from 'react-native';\n\nimport ExpoLinking from './ExpoLinking';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nimport RNLinking from './RNLinking';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventtype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native documentation on Linking](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return RNLinking.addEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await RNLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [`expo-intent-launcher`](./intent-launcher) instead. `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await RNLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the appâ€™s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (RNLinking.openSettings) {\n    return await RNLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await RNLinking.getInitialURL()) ?? null;\n}\n\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport function getLinkingURL(): string | null {\n  return ExpoLinking.getLinkingURL();\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open. For example: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await RNLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await RNLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\n/**\n * Returns the linking URL followed by any subsequent changes to the URL.\n * Always returns the initial URL immediately on reload.\n * @return Returns the initial URL or `null`.\n */\nexport function useLinkingURL(): string | null {\n  const [url, setLink] = useState<string | null>(ExpoLinking.getLinkingURL);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    const subscription = ExpoLinking.addListener('onURLReceived', onChange as any);\n    return () => subscription.remove();\n  }, []);\n\n  return url ?? null;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}