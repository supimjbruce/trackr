{"ast":null,"code":"\"use strict\";var _asyncToGenerator=require(\"@babel/runtime/helpers/asyncToGenerator\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.loadBundleAsync=void 0;var buildUrlForBundle_1=require(\"./buildUrlForBundle\");var fetchThenEval_1=require(\"./fetchThenEval\");var pendingRequests=0;function loadBundleAsync(_x){return _loadBundleAsync.apply(this,arguments);}function _loadBundleAsync(){_loadBundleAsync=_asyncToGenerator(function*(bundlePath){var requestUrl=(0,buildUrlForBundle_1.buildUrlForBundle)(bundlePath);if(\"production\"==='production'){return(0,fetchThenEval_1.fetchThenEvalAsync)(requestUrl);}else{var Platform=require('react-native').Platform;var LoadingView=require('../LoadingView').default;if(Platform.OS!=='web'){LoadingView.showMessage('Downloading...','load');}pendingRequests++;return(0,fetchThenEval_1.fetchThenEvalAsync)(requestUrl).then(function(){var HMRClient=require('../HMRClient').default;HMRClient.registerBundle(requestUrl);}).finally(function(){if(! --pendingRequests&&Platform.OS!=='web'){LoadingView.hide();}});}});return _loadBundleAsync.apply(this,arguments);}exports.loadBundleAsync=loadBundleAsync;","map":{"version":3,"names":["buildUrlForBundle_1","require","fetchThenEval_1","pendingRequests","loadBundleAsync","_x","_loadBundleAsync","apply","arguments","_asyncToGenerator","bundlePath","requestUrl","buildUrlForBundle","fetchThenEvalAsync","Platform","LoadingView","default","OS","showMessage","then","HMRClient","registerBundle","finally","hide","exports"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/src/async-require/loadBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { buildUrlForBundle } from './buildUrlForBundle';\nimport { fetchThenEvalAsync } from './fetchThenEval';\n\nlet pendingRequests = 0;\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon.bundle?params=from-metro`.\n */\nexport async function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath);\n\n  if (process.env.NODE_ENV === 'production') {\n    return fetchThenEvalAsync(requestUrl);\n  } else {\n    const Platform = require('react-native').Platform;\n    const LoadingView = require('../LoadingView')\n      .default as typeof import('../LoadingView').default;\n    if (Platform.OS !== 'web') {\n      // Send a signal to the `expo` package to show the loading indicator.\n      LoadingView.showMessage('Downloading...', 'load');\n    }\n    pendingRequests++;\n\n    return fetchThenEvalAsync(requestUrl)\n      .then(() => {\n        const HMRClient = require('../HMRClient').default as typeof import('../HMRClient').default;\n        HMRClient.registerBundle(requestUrl);\n      })\n      .finally(() => {\n        if (!--pendingRequests && Platform.OS !== 'web') {\n          LoadingView.hide();\n        }\n      });\n  }\n}\n"],"mappings":"8KAMA,IAAAA,mBAAA,CAAAC,OAAA,wBACA,IAAAC,eAAA,CAAAD,OAAA,oBAEA,GAAI,CAAAE,eAAe,CAAG,CAAC,CAAC,QAOF,CAAAC,eAAeA,CAAAC,EAAA,SAAAC,gBAAA,CAAAC,KAAA,MAAAC,SAAA,YAAAF,iBAAA,EAAAA,gBAAA,CAAAG,iBAAA,CAA9B,UAA+BC,UAAkB,EACtD,GAAM,CAAAC,UAAU,CAAG,GAAAX,mBAAA,CAAAY,iBAAiB,EAACF,UAAU,CAAC,CAEhD,GAAI,eAAyB,YAAY,CAAE,CACzC,MAAO,GAAAR,eAAA,CAAAW,kBAAkB,EAACF,UAAU,CAAC,C,CACtC,IAAM,CACL,GAAM,CAAAG,QAAQ,CAAGb,OAAO,CAAC,cAAc,CAAC,CAACa,QAAQ,CACjD,GAAM,CAAAC,WAAW,CAAGd,OAAO,CAAC,gBAAgB,CAAC,CAC1Ce,OAAkD,CACrD,GAAIF,QAAQ,CAACG,EAAE,GAAK,KAAK,CAAE,CAEzBF,WAAW,CAACG,WAAW,CAAC,gBAAgB,CAAE,MAAM,CAAC,C,CAEnDf,eAAe,EAAE,CAEjB,MAAO,GAAAD,eAAA,CAAAW,kBAAkB,EAACF,UAAU,CAAC,CAClCQ,IAAI,CAAC,UAAK,CACT,GAAM,CAAAC,SAAS,CAAGnB,OAAO,CAAC,cAAc,CAAC,CAACe,OAAgD,CAC1FI,SAAS,CAACC,cAAc,CAACV,UAAU,CAAC,CACtC,CAAC,CAAC,CACDW,OAAO,CAAC,UAAK,CACZ,GAAI,CAAC,GAAEnB,eAAe,EAAIW,QAAQ,CAACG,EAAE,GAAK,KAAK,CAAE,CAC/CF,WAAW,CAACQ,IAAI,EAAE,C,CAEtB,CAAC,CAAC,C,CAER,CAAC,SAAAjB,gBAAA,CAAAC,KAAA,MAAAC,SAAA,GA1BDgB,OAAA,CAAApB,eAAA,CAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}