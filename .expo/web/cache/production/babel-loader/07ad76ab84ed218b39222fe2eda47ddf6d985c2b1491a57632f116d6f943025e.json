{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});var formatToList=function formatToList(items){return items.map(function(key){return`- ${key}`;}).join('\\n');};function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens','_route'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}exports.default=validatePathConfig;","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value","exports","default"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/fork/validatePathConfig.ts"],"sourcesContent":["const formatToList = (items: string[]) => items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens', '_route'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter((key) => !validKeys.includes(key));\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":"yIAAA,GAAM,CAAAA,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,KAAe,QAAK,CAAAA,KAAK,CAACC,GAAG,CAAC,SAACC,GAAG,QAAK,KAAKA,GAAG,EAAE,GAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAEnF,QAAwB,CAAAC,kBAAkBA,CAACC,MAAW,CAAa,IAAX,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACjE,GAAM,CAAAG,SAAS,CAAG,CAAC,kBAAkB,CAAE,SAAS,CAAE,QAAQ,CAAC,CAE3D,GAAI,CAACJ,IAAI,CAAE,CACTI,SAAS,CAACC,IAAI,CAAC,MAAM,CAAE,OAAO,CAAE,WAAW,CAAE,OAAO,CAAC,C,CAGvD,GAAM,CAAAC,WAAW,CAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,CAAC,SAACb,GAAG,QAAK,CAACQ,SAAS,CAACM,QAAQ,CAACd,GAAG,CAAC,GAAC,CAEjF,GAAIU,WAAW,CAACJ,MAAM,CAAE,CACtB,KAAM,IAAI,CAAAS,KAAK,CACb,mDAAmDlB,YAAY,CAC7Da,WAAW,CACZ,qHAAqHb,YAAY,CAChIW,SAAS,CACV,wHAAwH,CAC1H,C,CAGH,GAAIL,MAAM,CAACa,OAAO,CAAE,CAClBL,MAAM,CAACM,OAAO,CAACd,MAAM,CAACa,OAAO,CAAC,CAACE,OAAO,CAAC,SAAAC,IAAA,CAAe,KAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAbG,CAAC,CAAAF,KAAA,IAAEG,KAAK,CAAAH,KAAA,IAC/C,GAAI,MAAO,CAAAG,KAAK,GAAK,QAAQ,CAAE,CAC7BrB,kBAAkB,CAACqB,KAAK,CAAE,KAAK,CAAC,C,CAEpC,CAAC,CAAC,C,CAEN,CA1BAC,OAAA,CAAAC,OAAA,CAAAvB,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}