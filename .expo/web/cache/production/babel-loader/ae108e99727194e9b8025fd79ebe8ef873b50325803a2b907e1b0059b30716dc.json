{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.fetchThenEvalAsync=void 0;var fetchAsync_1=require(\"./fetchAsync\");function fetchThenEvalAsync(url){return(0,fetchAsync_1.fetchAsync)(url).then(function(_ref){var body=_ref.body,status=_ref.status,headers=_ref.headers;if((headers==null?void 0:headers.has==null?void 0:headers.has('Content-Type'))!=null&&headers.get('Content-Type').includes('application/json')){throw new Error(JSON.parse(body).message||`Unknown error fetching '${url}'`);}if(status===200){if(global.globalEvalWithSourceUrl){return global.globalEvalWithSourceUrl(body,url);}else{return eval(body);}}else{if(\"production\"==='development'){var error=jsonParseOptional(body);if(error){if('message'in error){throw new Error('Failed to load split bundle from Metro '+url+' (check terminal for more info).\\n(load: '+error.message+')');}}}throw new Error(`Failed to load split bundle from Metro ${url} (check terminal for more info).\\n${body}`);}});}exports.fetchThenEvalAsync=fetchThenEvalAsync;function jsonParseOptional(json){try{return JSON.parse(json);}catch(_unused){return null;}}","map":{"version":3,"names":["fetchAsync_1","require","fetchThenEvalAsync","url","fetchAsync","then","_ref","body","status","headers","has","get","includes","Error","JSON","parse","message","global","globalEvalWithSourceUrl","eval","error","jsonParseOptional","exports","json","_unused"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/src/async-require/fetchThenEvalJs.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { fetchAsync } from './fetchAsync';\n\ndeclare let global: {\n  globalEvalWithSourceUrl?: any;\n};\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, status, headers }) => {\n    if (\n      headers?.has?.('Content-Type') != null &&\n      headers.get('Content-Type')!.includes('application/json')\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n\n    if (status === 200) {\n      // Some engines do not support `sourceURL` as a comment. We expose a\n      // `globalEvalWithSourceUrl` function to handle updates in that case.\n      if (global.globalEvalWithSourceUrl) {\n        return global.globalEvalWithSourceUrl(body, url);\n      } else {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      }\n    } else {\n      // Format Metro errors if possible.\n      if (process.env.NODE_ENV === 'development') {\n        // body can be an error from Metro if a module is missing.\n        // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n        const error = jsonParseOptional(body);\n        if (error) {\n          // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n          // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n          if ('message' in error) {\n            throw new Error(\n              'Failed to load split bundle from Metro ' +\n                url +\n                ' (check terminal for more info).\\n(load: ' +\n                error.message +\n                ')'\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        `Failed to load split bundle from Metro ${url} (check terminal for more info).\\n${body}`\n      );\n    }\n  });\n}\n\nfunction jsonParseOptional(json: string): any {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return null;\n  }\n}\n"],"mappings":"wGAMA,IAAAA,YAAA,CAAAC,OAAA,iBAWA,QAAgB,CAAAC,kBAAkBA,CAACC,GAAW,EAC5C,MAAO,GAAAH,YAAA,CAAAI,UAAU,EAACD,GAAG,CAAC,CAACE,IAAI,CAAC,SAAAC,IAAA,CAA8B,IAA3B,CAAAC,IAAI,CAAAD,IAAA,CAAJC,IAAI,CAAEC,MAAM,CAAAF,IAAA,CAANE,MAAM,CAAEC,OAAO,CAAAH,IAAA,CAAPG,OAAO,CAClD,GACE,CAAAA,OAAO,cAAPA,OAAO,CAAEC,GAAG,cAAZD,OAAO,CAAEC,GAAG,CAAG,cAAc,CAAC,GAAI,IAAI,EACtCD,OAAO,CAACE,GAAG,CAAC,cAAc,CAAE,CAACC,QAAQ,CAAC,kBAAkB,CAAC,CACzD,CAEA,KAAM,IAAI,CAAAC,KAAK,CAACC,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC,CAACS,OAAO,EAAI,2BAA2Bb,GAAG,GAAG,CAAC,C,CAGhF,GAAIK,MAAM,GAAK,GAAG,CAAE,CAGlB,GAAIS,MAAM,CAACC,uBAAuB,CAAE,CAClC,MAAO,CAAAD,MAAM,CAACC,uBAAuB,CAACX,IAAI,CAAEJ,GAAG,CAAC,C,CACjD,IAAM,CAEL,MAAO,CAAAgB,IAAI,CAACZ,IAAI,CAAC,C,EAEpB,IAAM,CAEL,GAAI,eAAyB,aAAa,CAAE,CAG1C,GAAM,CAAAa,KAAK,CAAGC,iBAAiB,CAACd,IAAI,CAAC,CACrC,GAAIa,KAAK,CAAE,CAGT,GAAI,SAAS,EAAI,CAAAA,KAAK,CAAE,CACtB,KAAM,IAAI,CAAAP,KAAK,CACb,yCAAyC,CACvCV,GAAG,CACH,2CAA2C,CAC3CiB,KAAK,CAACJ,OAAO,CACb,GAAG,CACN,C,GAKP,KAAM,IAAI,CAAAH,KAAK,CACb,0CAA0CV,GAAG,qCAAqCI,IAAI,EAAE,CACzF,C,CAEL,CAAC,CAAC,CACJ,CA7CAe,OAAA,CAAApB,kBAAA,CAAAA,kBAAA,CA+CA,QAAS,CAAAmB,iBAAiBA,CAACE,IAAY,EACrC,GAAI,CACF,MAAO,CAAAT,IAAI,CAACC,KAAK,CAACQ,IAAI,CAAC,C,CACvB,MAAAC,OAAA,CAAM,CACN,MAAO,KAAI,C,CAEf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}