{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.appendBaseUrl=exports.getPathDataFromState=exports.getPathFromState=void 0;var queryString=__importStar(require(\"query-string\"));var expo=__importStar(require(\"./getPathFromState-forks\"));var _getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return _getActiveRoute(route.state);}return route;};var cachedNormalizedConfigs=[undefined,{}];function getPathFromState(state,options){return getPathDataFromState(state,options).path;}exports.getPathFromState=getPathFromState;function getPathDataFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){expo.validatePathConfig(options);}if(cachedNormalizedConfigs[0]!==(options==null?void 0:options.screens)){cachedNormalizedConfigs=[options==null?void 0:options.screens,options!=null&&options.screens?createNormalizedConfigs(options.screens):{}];}var configs=cachedNormalizedConfigs[1];var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern;var focusedParams;var focusedRoute=_getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){var _currentOptions$route;var stringify=(_currentOptions$route=currentOptions[route.name])==null?void 0:_currentOptions$route.stringify;var currentParams=expo.fixCurrentParams(allParams,route,stringify);if(focusedRoute===route){var _pattern;focusedParams=_objectSpread({},currentParams);(_pattern=pattern)==null?void 0:_pattern.split('/').filter(function(p){return expo.isDynamicPart(p);}).forEach(function(p){var name=expo.getParamName(p);if(focusedParams){delete focusedParams[name];}});}}if(!currentOptions[route.name].screens||route.state===undefined){var _route$params$screen,_currentOptions$route2;var screens=currentOptions[route.name].screens;var screen=route.params&&'screen'in route.params?(_route$params$screen=route.params.screen)==null?void 0:_route$params$screen.toString():screens?Object.keys(screens)[0]:undefined;if(screen&&screens&&(_currentOptions$route2=currentOptions[route.name].screens)!=null&&_currentOptions$route2[screen]){route=_objectSpread(_objectSpread({},screens[screen]),{},{name:screen,key:screen});currentOptions=screens;}else{hasNext=false;}}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){var _configs$route$name;path+=expo.getPathWithConventionsCollapsed(_objectSpread(_objectSpread({},options),{},{pattern:pattern,route:route,params:allParams,initialRouteName:(_configs$route$name=configs[route.name])==null?void 0:_configs$route$name.initialRouteName}));}else if(!route.name.startsWith('+')){path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}delete focusedParams['#'];var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=`?${query}`;}}current=route.state;};while(current){_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;if(options!=null&&options.path){path=joinPaths(options.path,path);}path=expo.appendBaseUrl(path);if(allParams['#']){path+=`#${allParams['#']}`;}return{path:path,params:allParams};}exports.getPathDataFromState=getPathDataFromState;var joinPaths=function joinPaths(){var _ref;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref=[]).concat.apply(_ref,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(config,parentPattern){if(typeof config==='string'){var _pattern2=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern2};}if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}var pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:pattern==null?void 0:pattern.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return Object.fromEntries(Object.entries(options).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),name=_ref3[0],c=_ref3[1];var result=createConfigItem(c,pattern);return[name,result];}));};function appendBaseUrl(path){var baseUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";if(\"production\"!=='development'){if(baseUrl){return`/${baseUrl.replace(/^\\/+/,'').replace(/\\/$/,'')}${path}`;}}return path;}exports.appendBaseUrl=appendBaseUrl;","map":{"version":3,"names":["queryString","__importStar","require","expo","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","undefined","getPathFromState","options","getPathDataFromState","path","exports","Error","validatePathConfig","screens","createNormalizedConfigs","configs","current","allParams","_loop","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","_currentOptions$route","stringify","currentParams","fixCurrentParams","_pattern","_objectSpread","split","filter","p","isDynamicPart","forEach","getParamName","_route$params$screen","_currentOptions$route2","screen","toString","Object","keys","key","nextRoute","nestedConfig","join","_configs$route$name","getPathWithConventionsCollapsed","initialRouteName","startsWith","encodeURIComponent","param","query","sort","replace","joinPaths","appendBaseUrl","_ref","_len","arguments","paths","Array","_key","concat","apply","_toConsumableArray","map","Boolean","createConfigItem","config","parentPattern","exact","fromEntries","entries","_ref2","_ref3","_slicedToArray","c","result","baseUrl"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/fork/getPathFromState.ts"],"sourcesContent":["import { PathConfig, PathConfigMap } from '@react-navigation/native';\nimport type { NavigationState, PartialState, Route } from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport * as expo from './getPathFromState-forks';\nimport type { ExpoConfigItem, ExpoOptions } from './getPathFromState-forks';\n\n// START FORK\nexport type Options<ParamList extends object> = ExpoOptions & {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n// END FORK\n\nexport type State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\nexport type StringifyConfig = Record<string, (value: any) => string>;\n\n// START FORK\ntype ConfigItem = ExpoConfigItem & {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n// END FORK\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nlet cachedNormalizedConfigs: [PathConfigMap<object> | undefined, Record<string, ConfigItem>] = [\n  undefined,\n  {},\n];\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  return getPathDataFromState(state, options).path;\n}\n\nexport function getPathDataFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    // START FORK\n    expo.validatePathConfig(options);\n    // validatePathConfig(options);\n    // END FORK\n  }\n\n  // Create a normalized configs object which will be easier to use\n  if (cachedNormalizedConfigs[0] !== options?.screens) {\n    cachedNormalizedConfigs = [\n      options?.screens,\n      options?.screens ? createNormalizedConfigs(options.screens) : {},\n    ];\n  }\n  const configs: Record<string, ConfigItem> = cachedNormalizedConfigs[1];\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames: string[] = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        // START FORK\n        // This mutates allParams\n        const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n\n        // const currentParams = Object.fromEntries(\n        //   Object.entries(route.params).map(([key, value]) => [\n        //     key,\n        //     stringify?.[key] ? stringify[key](value) : String(value),\n        //   ])\n        // );\n\n        // if (pattern) {\n        //   Object.assign(allParams, currentParams);\n        // }\n        // END FORK\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = expo.getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        // START FORK\n        // Expo Router can end up in some configs that React Navigation doesn't seem to support\n        // We can get around this by providing a fake state\n        const screens = currentOptions[route.name].screens;\n        const screen =\n          route.params && 'screen' in route.params\n            ? route.params.screen?.toString()\n            : screens\n              ? Object.keys(screens)[0]\n              : undefined;\n\n        if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n          route = { ...screens[screen], name: screen, key: screen };\n          currentOptions = screens;\n        } else {\n          hasNext = false;\n        }\n        // hasNext = false;\n        // END FORK\n      } else {\n        index =\n          typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      // START FORK\n      path += expo.getPathWithConventionsCollapsed({\n        ...options,\n        pattern,\n        route,\n        params: allParams,\n        initialRouteName: configs[route.name]?.initialRouteName,\n      });\n      // path += pattern\n      //   .split('/')\n      //   .map((p) => {\n      //     const name = getParamName(p);\n\n      //     // We don't know what to show for wildcard patterns\n      //     // Showing the route name seems ok, though whatever we show here will be incorrect\n      //     // Since the page doesn't actually exist\n      //     if (p === '*') {\n      //       return route.name;\n      //     }\n\n      //     // If the path has a pattern for a param, put the param in the path\n      //     if (p.startsWith(':')) {\n      //       const value = allParams[name];\n\n      //       if (value === undefined && p.endsWith('?')) {\n      //         // Optional params without value assigned in route.params should be ignored\n      //         return '';\n      //       }\n\n      //       // Valid characters according to\n      //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n      //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n      //         encodeURIComponent(char)\n      //       );\n      //     }\n\n      //     return encodeURIComponent(p);\n      //   })\n      //   .join('/');\n      // } else {\n    } else if (!route.name.startsWith('+')) {\n      path += encodeURIComponent(route.name);\n    }\n    // END FORK\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      // START FORK\n      delete focusedParams['#'];\n      // END FORK\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n\n  // START FORK\n  path = expo.appendBaseUrl(path);\n  if (allParams['#']) {\n    path += `#${allParams['#']}`;\n  }\n  // END FORK\n\n  // START FORK\n  return { path, params: allParams };\n  // END FORK\n}\n\n// const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n\nexport function appendBaseUrl(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n    }\n  }\n  return path;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}