{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar getPathFromState_1 = require(\"../fork/getPathFromState\");\nvar router_store_1 = require(\"../global-state/router-store\");\nvar matchers_1 = require(\"../matchers\");\nfunction eventShouldPreventDefault(e) {\n  if (e != null && e.defaultPrevented) {\n    return false;\n  }\n  if ('button' in e && !e.metaKey && !e.altKey && !e.ctrlKey && !e.shiftKey && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes(e.currentTarget.target)) {\n    return true;\n  }\n  return false;\n}\nfunction useLinkToPathProps(props) {\n  var _ref = (0, router_store_1.useExpoRouter)(),\n    linkTo = _ref.linkTo;\n  var onPress = function onPress(e) {\n    var shouldHandle = false;\n    if (react_native_1.Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (eventShouldPreventDefault(e)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      linkTo(props.href, props.event);\n    }\n  };\n  return {\n    href: (0, getPathFromState_1.appendBaseUrl)((0, matchers_1.stripGroupSegmentsFromPath)(props.href) || '/'),\n    role: 'link',\n    onPress: onPress\n  };\n}\nexports.default = useLinkToPathProps;","map":{"version":3,"names":["getPathFromState_1","require","router_store_1","matchers_1","eventShouldPreventDefault","e","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","target","useLinkToPathProps","props","_ref","useExpoRouter","linkTo","onPress","shouldHandle","react_native_1","Platform","OS","preventDefault","href","event","appendBaseUrl","stripGroupSegmentsFromPath","role","exports","default"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/link/useLinkToPathProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport { appendBaseUrl } from '../fork/getPathFromState';\nimport { useExpoRouter } from '../global-state/router-store';\nimport { stripGroupSegmentsFromPath } from '../matchers';\n\nfunction eventShouldPreventDefault(\n  e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n): boolean {\n  if (e?.defaultPrevented) {\n    return false;\n  }\n\n  if (\n    // Only check MouseEvents\n    'button' in e &&\n    // ignore clicks with modifier keys\n    !e.metaKey &&\n    !e.altKey &&\n    !e.ctrlKey &&\n    !e.shiftKey &&\n    (e.button == null || e.button === 0) && // Only accept left clicks\n    [undefined, null, '', 'self'].includes(e.currentTarget.target) // let browser handle \"target=_blank\" etc.\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default function useLinkToPathProps(props: { href: string; event?: string }) {\n  const { linkTo } = useExpoRouter();\n\n  const onPress = (e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (eventShouldPreventDefault(e)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      linkTo(props.href, props.event);\n    }\n  };\n\n  return {\n    // Ensure there's always a value for href. Manually append the baseUrl to the href prop that shows in the static HTML.\n    href: appendBaseUrl(stripGroupSegmentsFromPath(props.href) || '/'),\n    role: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":";;;;;;AAGA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AAEA,SAASG,yBAAyBA,CAChCC,CAA0E;EAE1E,IAAIA,CAAC,YAADA,CAAC,CAAEC,gBAAgB,EAAE;IACvB,OAAO,KAAK;;EAGd,IAEE,QAAQ,IAAID,CAAC,IAEb,CAACA,CAAC,CAACE,OAAO,IACV,CAACF,CAAC,CAACG,MAAM,IACT,CAACH,CAAC,CAACI,OAAO,IACV,CAACJ,CAAC,CAACK,QAAQ,KACVL,CAAC,CAACM,MAAM,IAAI,IAAI,IAAIN,CAAC,CAACM,MAAM,KAAK,CAAC,CAAC,IACpC,CAACC,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACR,CAAC,CAACS,aAAa,CAACC,MAAM,CAAC,EAC9D;IACA,OAAO,IAAI;;EAGb,OAAO,KAAK;AACd;AAEA,SAAwBC,kBAAkBA,CAACC,KAAuC;EAChF,IAAAC,IAAA,GAAmB,IAAAhB,cAAA,CAAAiB,aAAa,GAAE;IAA1BC,MAAM,GAAAF,IAAA,CAANE,MAAM;EAEd,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIhB,CAA2E,EAAI;IAC9F,IAAIiB,YAAY,GAAG,KAAK;IAExB,IAAIC,cAAA,CAAAC,QAAQ,CAACC,EAAE,KAAK,KAAK,IAAI,CAACpB,CAAC,EAAE;MAC/BiB,YAAY,GAAGjB,CAAC,GAAG,CAACA,CAAC,CAACC,gBAAgB,GAAG,IAAI;KAC9C,MAAM,IAAIF,yBAAyB,CAACC,CAAC,CAAC,EAAE;MACvCA,CAAC,CAACqB,cAAc,EAAE;MAClBJ,YAAY,GAAG,IAAI;;IAGrB,IAAIA,YAAY,EAAE;MAChBF,MAAM,CAACH,KAAK,CAACU,IAAI,EAAEV,KAAK,CAACW,KAAK,CAAC;;EAEnC,CAAC;EAED,OAAO;IAELD,IAAI,EAAE,IAAA3B,kBAAA,CAAA6B,aAAa,EAAC,IAAA1B,UAAA,CAAA2B,0BAA0B,EAACb,KAAK,CAACU,IAAI,CAAC,IAAI,GAAG,CAAC;IAClEI,IAAI,EAAE,MAAe;IACrBV,OAAO,EAAPA;GACD;AACH;AAxBAW,OAAA,CAAAC,OAAA,GAAAjB,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}