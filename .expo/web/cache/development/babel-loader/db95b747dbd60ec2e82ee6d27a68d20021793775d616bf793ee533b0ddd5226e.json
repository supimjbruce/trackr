{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Screen = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar useNavigation_1 = require(\"../useNavigation\");\nvar useLayoutEffect = typeof window !== 'undefined' ? react_1.default.useLayoutEffect : function () {};\nfunction Screen(_ref) {\n  var name = _ref.name,\n    options = _ref.options;\n  var navigation = (0, useNavigation_1.useNavigation)(name);\n  useLayoutEffect(function () {\n    if (options && Object.keys(options).length) {\n      navigation.setOptions(options);\n    }\n  }, [navigation, options]);\n  return null;\n}\nexports.Screen = Screen;","map":{"version":3,"names":["react_1","__importDefault","require","useNavigation_1","useLayoutEffect","window","default","Screen","_ref","name","options","navigation","useNavigation","Object","keys","length","setOptions","exports"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/views/Screen.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useNavigation } from '../useNavigation';\n\nexport type ScreenProps<TOptions extends Record<string, any> = Record<string, any>> = {\n  /**\n   * Name is required when used inside a Layout component.\n   *\n   * When used in a route, this can be an absolute path like `/(root)` to the parent route or a relative path like `../../` to the parent route.\n   * This should not be used inside of a Layout component.\n   * @example `/(root)` maps to a layout route `/app/(root).tsx`.\n   */\n  name?: string;\n\n  initialParams?: { [key: string]: any };\n  options?: TOptions;\n};\n\nconst useLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : function () {};\n\n/** Component for setting the current screen's options dynamically. */\nexport function Screen<TOptions extends object = object>({ name, options }: ScreenProps<TOptions>) {\n  const navigation = useNavigation(name);\n\n  useLayoutEffect(() => {\n    if (\n      options &&\n      // React Navigation will infinitely loop in some cases if an empty object is passed to setOptions.\n      // https://github.com/expo/router/issues/452\n      Object.keys(options).length\n    ) {\n      navigation.setOptions(options);\n    }\n  }, [navigation, options]);\n\n  return null;\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,eAAA,GAAAD,OAAA;AAgBA,IAAME,eAAe,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGL,OAAA,CAAAM,OAAK,CAACF,eAAe,GAAG,aAAa,CAAC;AAG9F,SAAgBG,MAAMA,CAAAC,IAAA,EAA2E;EAAA,IAAtCC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACtE,IAAMC,UAAU,GAAG,IAAAR,eAAA,CAAAS,aAAa,EAACH,IAAI,CAAC;EAEtCL,eAAe,CAAC,YAAK;IACnB,IACEM,OAAO,IAGPG,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAACK,MAAM,EAC3B;MACAJ,UAAU,CAACK,UAAU,CAACN,OAAO,CAAC;;EAElC,CAAC,EAAE,CAACC,UAAU,EAAED,OAAO,CAAC,CAAC;EAEzB,OAAO,IAAI;AACb;AAfAO,OAAA,CAAAV,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}