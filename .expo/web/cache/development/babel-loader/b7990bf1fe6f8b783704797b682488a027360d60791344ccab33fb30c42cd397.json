{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adjustPathname = exports.extractExpoPathFromURL = void 0;\nvar Linking = __importStar(require(\"expo-linking\"));\nfunction extractExactPathFromURL(url) {\n  var _globalThis$expo, _globalThis$expo$modu;\n  if (url.match(/^https?:\\/\\//)) {\n    var _URL = new URL(url),\n      origin = _URL.origin,\n      href = _URL.href;\n    return href.replace(origin, '');\n  }\n  var isExpoGo = typeof expo !== 'undefined' && ((_globalThis$expo = globalThis.expo) == null ? void 0 : (_globalThis$expo$modu = _globalThis$expo.modules) == null ? void 0 : _globalThis$expo$modu.ExpoGo);\n  if (isExpoGo && url.match(/^exp(s)?:\\/\\//)) {\n    var _url$match;\n    var pathname = (_url$match = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)) == null ? void 0 : _url$match[1];\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    var res = Linking.parse(url);\n    var qs = !res.queryParams ? '' : Object.entries(res.queryParams).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return `${k}=${v}`;\n    }).join('&');\n    return adjustPathname({\n      hostname: res.hostname,\n      pathname: res.path || ''\n    }) + (qs ? '?' + qs : '');\n  }\n  return fromDeepLink(url);\n}\nfunction isExpoDevelopmentClient(url) {\n  return url.hostname === 'expo-development-client';\n}\nfunction fromDeepLink(url) {\n  var res;\n  try {\n    res = new URL(url);\n  } catch (_unused) {\n    return url;\n  }\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    var incomingUrl = res.searchParams.get('url');\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n  var results = '';\n  if (res.host) {\n    results += res.host;\n  }\n  if (res.pathname) {\n    results += res.pathname;\n  }\n  var qs = !res.search ? '' : _toConsumableArray(res.searchParams.entries()).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    return `${k}=${decodeURIComponent(v)}`;\n  }).join('&');\n  if (qs) {\n    results += '?' + qs;\n  }\n  return results;\n}\nfunction extractExpoPathFromURL() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}\nexports.extractExpoPathFromURL = extractExpoPathFromURL;\nfunction adjustPathname(url) {\n  if (url.hostname === 'exp.host' || url.hostname === 'u.expo.dev') {\n    return url.pathname.split('/').slice(2).join('/');\n  }\n  return url.pathname;\n}\nexports.adjustPathname = adjustPathname;","map":{"version":3,"names":["Linking","__importStar","require","extractExactPathFromURL","url","_globalThis$expo","_globalThis$expo$modu","match","_URL","URL","origin","href","replace","isExpoGo","expo","globalThis","modules","ExpoGo","_url$match","pathname","fromDeepLink","res","parse","qs","queryParams","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","join","adjustPathname","hostname","path","isExpoDevelopmentClient","_unused","searchParams","get","incomingUrl","decodeURI","results","host","search","_toConsumableArray","_ref3","_ref4","decodeURIComponent","extractExpoPathFromURL","arguments","length","undefined","exports","split","slice"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["import * as Linking from 'expo-linking';\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href } = new URL(url);\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1];\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n\n    const res = Linking.parse(url);\n\n    const qs = !res.queryParams\n      ? ''\n      : Object.entries(res.queryParams)\n          .map(([k, v]) => `${k}=${v}`)\n          .join('&');\n    return (\n      adjustPathname({ hostname: res.hostname, pathname: res.path || '' }) + (qs ? '?' + qs : '')\n    );\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  // TODO: We should get rid of this, dropping specificities is not good\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}\n\nexport function adjustPathname(url: { hostname?: string | null; pathname: string }) {\n  if (url.hostname === 'exp.host' || url.hostname === 'u.expo.dev') {\n    // drop the first two segments from pathname:\n    return url.pathname.split('/').slice(2).join('/');\n  }\n  return url.pathname;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}