{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return `- ${key}`;\n  }).join('\\n');\n};\nfunction validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens', '_route'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        _ = _ref2[0],\n        value = _ref2[1];\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\nexports.default = validatePathConfig;","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value","exports","default"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/fork/validatePathConfig.ts"],"sourcesContent":["const formatToList = (items: string[]) => items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens', '_route'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter((key) => !validKeys.includes(key));\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAe;EAAA,OAAKA,KAAK,CAACC,GAAG,CAAC,UAACC,GAAG;IAAA,OAAK,KAAKA,GAAG,EAAE;EAAA,EAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AAAA;AAEnF,SAAwBC,kBAAkBA,CAACC,MAAW,EAAa;EAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACjE,IAAMG,SAAS,GAAG,CAAC,kBAAkB,EAAE,SAAS,EAAE,QAAQ,CAAC;EAE3D,IAAI,CAACJ,IAAI,EAAE;IACTI,SAAS,CAACC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC;;EAGvD,IAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,CAAC,UAACb,GAAG;IAAA,OAAK,CAACQ,SAAS,CAACM,QAAQ,CAACd,GAAG,CAAC;EAAA,EAAC;EAEjF,IAAIU,WAAW,CAACJ,MAAM,EAAE;IACtB,MAAM,IAAIS,KAAK,CACb,mDAAmDlB,YAAY,CAC7Da,WAAW,CACZ,qHAAqHb,YAAY,CAChIW,SAAS,CACV,wHAAwH,CAC1H;;EAGH,IAAIL,MAAM,CAACa,OAAO,EAAE;IAClBL,MAAM,CAACM,OAAO,CAACd,MAAM,CAACa,OAAO,CAAC,CAACE,OAAO,CAAC,UAAAC,IAAA,EAAe;MAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;QAAbG,CAAC,GAAAF,KAAA;QAAEG,KAAK,GAAAH,KAAA;MAC/C,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;QAC7BrB,kBAAkB,CAACqB,KAAK,EAAE,KAAK,CAAC;;IAEpC,CAAC,CAAC;;AAEN;AA1BAC,OAAA,CAAAC,OAAA,GAAAvB,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}