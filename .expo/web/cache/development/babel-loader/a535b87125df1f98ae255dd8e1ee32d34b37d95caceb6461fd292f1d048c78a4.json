{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchThenEvalAsync = void 0;\nvar fetchAsync_1 = require(\"./fetchAsync\");\nfunction fetchThenEvalAsync(url) {\n  return (0, fetchAsync_1.fetchAsync)(url).then(function (_ref) {\n    var body = _ref.body,\n      status = _ref.status,\n      headers = _ref.headers;\n    if ((headers == null ? void 0 : headers.has == null ? void 0 : headers.has('Content-Type')) != null && headers.get('Content-Type').includes('application/json')) {\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n    if (status === 200) {\n      if (global.globalEvalWithSourceUrl) {\n        return global.globalEvalWithSourceUrl(body, url);\n      } else {\n        return eval(body);\n      }\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        var error = jsonParseOptional(body);\n        if (error) {\n          if ('message' in error) {\n            throw new Error('Failed to load split bundle from Metro ' + url + ' (check terminal for more info).\\n(load: ' + error.message + ')');\n          }\n        }\n      }\n      throw new Error(`Failed to load split bundle from Metro ${url} (check terminal for more info).\\n${body}`);\n    }\n  });\n}\nexports.fetchThenEvalAsync = fetchThenEvalAsync;\nfunction jsonParseOptional(json) {\n  try {\n    return JSON.parse(json);\n  } catch (_unused) {\n    return null;\n  }\n}","map":{"version":3,"names":["fetchAsync_1","require","fetchThenEvalAsync","url","fetchAsync","then","_ref","body","status","headers","has","get","includes","Error","JSON","parse","message","global","globalEvalWithSourceUrl","eval","process","env","NODE_ENV","error","jsonParseOptional","exports","json","_unused"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/src/async-require/fetchThenEvalJs.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { fetchAsync } from './fetchAsync';\n\ndeclare let global: {\n  globalEvalWithSourceUrl?: any;\n};\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, status, headers }) => {\n    if (\n      headers?.has?.('Content-Type') != null &&\n      headers.get('Content-Type')!.includes('application/json')\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n\n    if (status === 200) {\n      // Some engines do not support `sourceURL` as a comment. We expose a\n      // `globalEvalWithSourceUrl` function to handle updates in that case.\n      if (global.globalEvalWithSourceUrl) {\n        return global.globalEvalWithSourceUrl(body, url);\n      } else {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      }\n    } else {\n      // Format Metro errors if possible.\n      if (process.env.NODE_ENV === 'development') {\n        // body can be an error from Metro if a module is missing.\n        // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n        const error = jsonParseOptional(body);\n        if (error) {\n          // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n          // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n          if ('message' in error) {\n            throw new Error(\n              'Failed to load split bundle from Metro ' +\n                url +\n                ' (check terminal for more info).\\n(load: ' +\n                error.message +\n                ')'\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        `Failed to load split bundle from Metro ${url} (check terminal for more info).\\n${body}`\n      );\n    }\n  });\n}\n\nfunction jsonParseOptional(json: string): any {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return null;\n  }\n}\n"],"mappings":";;;;;;AAMA,IAAAA,YAAA,GAAAC,OAAA;AAWA,SAAgBC,kBAAkBA,CAACC,GAAW;EAC5C,OAAO,IAAAH,YAAA,CAAAI,UAAU,EAACD,GAAG,CAAC,CAACE,IAAI,CAAC,UAAAC,IAAA,EAA8B;IAAA,IAA3BC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;MAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IAClD,IACE,CAAAA,OAAO,oBAAPA,OAAO,CAAEC,GAAG,oBAAZD,OAAO,CAAEC,GAAG,CAAG,cAAc,CAAC,KAAI,IAAI,IACtCD,OAAO,CAACE,GAAG,CAAC,cAAc,CAAE,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EACzD;MAEA,MAAM,IAAIC,KAAK,CAACC,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC,CAACS,OAAO,IAAI,2BAA2Bb,GAAG,GAAG,CAAC;;IAGhF,IAAIK,MAAM,KAAK,GAAG,EAAE;MAGlB,IAAIS,MAAM,CAACC,uBAAuB,EAAE;QAClC,OAAOD,MAAM,CAACC,uBAAuB,CAACX,IAAI,EAAEJ,GAAG,CAAC;OACjD,MAAM;QAEL,OAAOgB,IAAI,CAACZ,IAAI,CAAC;;KAEpB,MAAM;MAEL,IAAIa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAG1C,IAAMC,KAAK,GAAGC,iBAAiB,CAACjB,IAAI,CAAC;QACrC,IAAIgB,KAAK,EAAE;UAGT,IAAI,SAAS,IAAIA,KAAK,EAAE;YACtB,MAAM,IAAIV,KAAK,CACb,yCAAyC,GACvCV,GAAG,GACH,2CAA2C,GAC3CoB,KAAK,CAACP,OAAO,GACb,GAAG,CACN;;;;MAKP,MAAM,IAAIH,KAAK,CACb,0CAA0CV,GAAG,qCAAqCI,IAAI,EAAE,CACzF;;EAEL,CAAC,CAAC;AACJ;AA7CAkB,OAAA,CAAAvB,kBAAA,GAAAA,kBAAA;AA+CA,SAASsB,iBAAiBA,CAACE,IAAY;EACrC,IAAI;IACF,OAAOZ,IAAI,CAACC,KAAK,CAACW,IAAI,CAAC;GACxB,CAAC,OAAAC,OAAA,EAAM;IACN,OAAO,IAAI;;AAEf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}