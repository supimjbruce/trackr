{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveHref = void 0;\nvar resolveHref = function resolveHref(href) {\n  var _href$pathname;\n  if (typeof href === 'string') {\n    return (0, exports.resolveHref)({\n      pathname: href != null ? href : ''\n    });\n  }\n  var path = (_href$pathname = href.pathname) != null ? _href$pathname : '';\n  if (!(href != null && href.params)) {\n    return path;\n  }\n  var _createQualifiedPathn = createQualifiedPathname(path, _objectSpread({}, href.params)),\n    pathname = _createQualifiedPathn.pathname,\n    params = _createQualifiedPathn.params;\n  var paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\nexports.resolveHref = resolveHref;\nfunction createQualifiedPathname(pathname, params) {\n  for (var _ref of Object.entries(params)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var _ref2$ = _ref2[1];\n    var value = _ref2$ === void 0 ? '' : _ref2$;\n    var dynamicKey = `[${key}]`;\n    var deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n    delete params[key];\n  }\n  return {\n    pathname: pathname,\n    params: params\n  };\n}\nfunction encodeParam(param) {\n  if (Array.isArray(param)) {\n    return param.map(function (p) {\n      return encodeParam(p);\n    }).join('/');\n  }\n  return encodeURIComponent(param.toString());\n}\nfunction createQueryParams(params) {\n  return Object.entries(params).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      value = _ref4[1];\n    return value != null;\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      value = _ref6[1];\n    return `${key}=${encodeURIComponent(value.toString())}`;\n  }).join('&');\n}","map":{"version":3,"names":["resolveHref","href","_href$pathname","exports","pathname","path","params","_createQualifiedPathn","createQualifiedPathname","_objectSpread","paramsString","createQueryParams","_ref","Object","entries","_ref2","_slicedToArray","key","_ref2$","value","dynamicKey","deepDynamicKey","includes","replace","encodeParam","param","Array","isArray","map","p","join","encodeURIComponent","toString","filter","_ref3","_ref4","_ref5","_ref6"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/link/href.ts"],"sourcesContent":["export type Href = string | HrefObject;\n\nexport interface HrefObject {\n  /** Path representing the selected route `/[id]`. */\n  pathname?: string;\n  /** Query parameters for the path. */\n  params?: Record<string, any>;\n}\n\n/** Resolve an href object into a fully qualified, relative href. */\nexport const resolveHref = (href: Href): string => {\n  if (typeof href === 'string') {\n    return resolveHref({ pathname: href ?? '' });\n  }\n  const path = href.pathname ?? '';\n  if (!href?.params) {\n    return path;\n  }\n  const { pathname, params } = createQualifiedPathname(path, {\n    ...href.params,\n  });\n  const paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\n\nfunction createQualifiedPathname(\n  pathname: string,\n  params: Record<string, any>\n): Omit<Required<HrefObject>, 'query'> {\n  for (const [key, value = ''] of Object.entries(params)) {\n    const dynamicKey = `[${key}]`;\n    const deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n\n    delete params[key];\n  }\n  return { pathname, params };\n}\n\nfunction encodeParam(param: any): string {\n  if (Array.isArray(param)) {\n    return param.map((p) => encodeParam(p)).join('/');\n  }\n\n  return encodeURIComponent(param.toString());\n}\n\nfunction createQueryParams(params: Record<string, any>): string {\n  return (\n    Object.entries(params)\n      // Allow nullish params\n      .filter(([, value]) => value != null)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`)\n      .join('&')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}