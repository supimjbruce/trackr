{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _globalThis$expo, _globalThis$expo$modu;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathFromState = exports.getStateFromPath = exports.addEventListener = exports.getRootURL = exports.getInitialURL = void 0;\nvar Linking = __importStar(require(\"expo-linking\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar extractPathFromURL_1 = require(\"../fork/extractPathFromURL\");\nvar getPathFromState_1 = __importDefault(require(\"../fork/getPathFromState\"));\nexports.getPathFromState = getPathFromState_1.default;\nvar getStateFromPath_1 = __importDefault(require(\"../fork/getStateFromPath\"));\nexports.getStateFromPath = getStateFromPath_1.default;\nvar isExpoGo = typeof expo !== 'undefined' && ((_globalThis$expo = globalThis.expo) == null ? void 0 : (_globalThis$expo$modu = _globalThis$expo.modules) == null ? void 0 : _globalThis$expo$modu.ExpoGo);\nfunction getInitialURL() {\n  if (process.env.NODE_ENV === 'test') {\n    var _Linking$getInitialUR;\n    return (_Linking$getInitialUR = Linking.getInitialURL()) != null ? _Linking$getInitialUR : getRootURL();\n  }\n  if (react_native_1.Platform.OS === 'web') {\n    var _window$location;\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (typeof ((_window$location = window.location) == null ? void 0 : _window$location.href) === 'string') {\n      return window.location.href;\n    }\n  }\n  return Promise.race([_asyncToGenerator(function* () {\n    var url = yield Linking.getInitialURL();\n    if (url && isExpoGo) {\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || ['', '/'].includes((0, extractPathFromURL_1.adjustPathname)({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        return getRootURL();\n      }\n    }\n    return url != null ? url : getRootURL();\n  })(), new Promise(function (resolve) {\n    return (setTimeout(function () {\n        return resolve(getRootURL());\n      }, 150)\n    );\n  })]);\n}\nexports.getInitialURL = getInitialURL;\nvar _rootURL;\nfunction getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\nexports.getRootURL = getRootURL;\nfunction addEventListener(listener) {\n  var callback = undefined;\n  if (isExpoGo) {\n    callback = function callback(_ref2) {\n      var url = _ref2.url;\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || ['', '/'].includes((0, extractPathFromURL_1.adjustPathname)({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = function callback(_ref3) {\n      var url = _ref3.url;\n      return listener(url);\n    };\n  }\n  var subscription = Linking.addEventListener('url', callback);\n  return function () {\n    subscription == null ? void 0 : subscription.remove == null ? void 0 : subscription.remove();\n  };\n}\nexports.addEventListener = addEventListener;","map":{"version":3,"names":["Linking","__importStar","require","react_native_1","extractPathFromURL_1","getPathFromState_1","__importDefault","exports","getPathFromState","default","getStateFromPath_1","getStateFromPath","isExpoGo","expo","_globalThis$expo","globalThis","_globalThis$expo$modu","modules","ExpoGo","getInitialURL","process","env","NODE_ENV","_Linking$getInitialUR","getRootURL","Platform","OS","_window$location","window","location","href","Promise","race","_asyncToGenerator","url","parsed","parse","path","includes","adjustPathname","hostname","pathname","resolve","setTimeout","_rootURL","undefined","createURL","addEventListener","listener","callback","_ref2","_ref3","subscription","remove"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { adjustPathname } from '../fork/extractPathFromURL';\nimport getPathFromState from '../fork/getPathFromState';\nimport getStateFromPath from '../fork/getStateFromPath';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): Promise<string | null> | string {\n  if (process.env.NODE_ENV === 'test') {\n    return Linking.getInitialURL() ?? getRootURL();\n  }\n\n  if (Platform.OS === 'web') {\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (typeof window.location?.href === 'string') {\n      return window.location.href;\n    }\n  }\n  return Promise.race<string>([\n    (async () => {\n      const url = await Linking.getInitialURL();\n\n      // NOTE(EvanBacon): This could probably be wrapped with the development boundary\n      // since Expo Go is mostly just used in development.\n\n      // Expo Go is weird and requires the root path to be `/--/`\n      if (url && isExpoGo) {\n        const parsed = Linking.parse(url);\n        // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n        // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n        if (\n          parsed.path === null ||\n          ['', '/'].includes(\n            adjustPathname({\n              hostname: parsed.hostname,\n              pathname: parsed.path,\n            })\n          )\n        ) {\n          return getRootURL();\n        }\n      }\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      return url ?? getRootURL();\n    })(),\n    new Promise<string>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(getRootURL()), 150)\n    ),\n  ]);\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\n\nexport function addEventListener(listener: (url: string) => void) {\n  let callback: (({ url }: { url: string }) => void) | undefined = undefined;\n\n  if (isExpoGo) {\n    // This extra work is only done in the Expo Go app.\n    callback = ({ url }: { url: string }) => {\n      const parsed = Linking.parse(url);\n\n      // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n      // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n      if (\n        parsed.path === null ||\n        ['', '/'].includes(adjustPathname({ hostname: parsed.hostname, pathname: parsed.path }))\n      ) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = ({ url }: { url: string }) => listener(url);\n  }\n  const subscription = Linking.addEventListener('url', callback);\n\n  return () => {\n    // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n    subscription?.remove?.();\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}