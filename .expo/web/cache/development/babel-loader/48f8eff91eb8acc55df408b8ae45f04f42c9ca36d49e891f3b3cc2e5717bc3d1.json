{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withErrorOverlay = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar ErrorToastContainer_1 = __importDefault(require(\"./toast/ErrorToastContainer\"));\nif (!global.setImmediate) {\n  global.setImmediate = function (fn) {\n    return setTimeout(fn, 0);\n  };\n}\nif (process.env.NODE_ENV === 'development') {\n  if (react_native_1.Platform.OS === 'web') {\n    require('./LogBox').default.install();\n  }\n}\nfunction withErrorOverlay(Comp) {\n  if (process.env.NODE_ENV === 'production') {\n    return Comp;\n  }\n  return function ErrorOverlay(props) {\n    return react_1.default.createElement(ErrorToastContainer_1.default, null, react_1.default.createElement(Comp, _objectSpread({}, props)));\n  };\n}\nexports.withErrorOverlay = withErrorOverlay;","map":{"version":3,"names":["react_1","__importDefault","require","react_native_1","ErrorToastContainer_1","global","setImmediate","fn","setTimeout","process","env","NODE_ENV","Platform","OS","default","install","withErrorOverlay","Comp","ErrorOverlay","props","createElement","_objectSpread","exports"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/src/error-overlay/index.tsx"],"sourcesContent":["import React from 'react';\n// TODO: This will break tree shaking due to how we transpile this package.\nimport { Platform } from 'react-native';\n\nimport ErrorToastContainer from './toast/ErrorToastContainer';\n\ndeclare const process: any;\n\nif (!global.setImmediate) {\n  global.setImmediate = function (fn) {\n    return setTimeout(fn, 0);\n  };\n}\n\nif (process.env.NODE_ENV === 'development') {\n  if (Platform.OS === 'web') {\n    // Stack traces are big with React Navigation\n\n    require('./LogBox').default.install();\n  }\n}\n\nexport function withErrorOverlay(Comp: React.ComponentType<any>) {\n  if (process.env.NODE_ENV === 'production') {\n    return Comp;\n  }\n  return function ErrorOverlay(props: any) {\n    return (\n      <ErrorToastContainer>\n        <Comp {...props} />\n      </ErrorToastContainer>\n    );\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAA0B,IAAAC,cAAA,GAAAD,OAAA;AAI1B,IAAAE,qBAAA,GAAAH,eAAA,CAAAC,OAAA;AAIA,IAAI,CAACG,MAAM,CAACC,YAAY,EAAE;EACxBD,MAAM,CAACC,YAAY,GAAG,UAAUC,EAAE;IAChC,OAAOC,UAAU,CAACD,EAAE,EAAE,CAAC,CAAC;EAC1B,CAAC;;AAGH,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EAC1C,IAAIR,cAAA,CAAAS,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IAGzBX,OAAO,CAAC,UAAU,CAAC,CAACY,OAAO,CAACC,OAAO,EAAE;;;AAIzC,SAAgBC,gBAAgBA,CAACC,IAA8B;EAC7D,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,OAAOM,IAAI;;EAEb,OAAO,SAASC,YAAYA,CAACC,KAAU;IACrC,OACEnB,OAAA,CAAAc,OAAA,CAAAM,aAAA,CAAChB,qBAAA,CAAAU,OAAmB,QAClBd,OAAA,CAAAc,OAAA,CAAAM,aAAA,CAACH,IAAI,EAAAI,aAAA,KAAKF,KAAK,EAAI,CACC;EAE1B,CAAC;AACH;AAXAG,OAAA,CAAAN,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}