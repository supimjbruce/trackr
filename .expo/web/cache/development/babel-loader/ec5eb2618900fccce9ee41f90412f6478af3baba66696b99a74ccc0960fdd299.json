{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ansi = void 0;\nvar anser_1 = __importDefault(require(\"anser\"));\nvar react_1 = __importDefault(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar COLORS = {\n  'ansi-black': 'rgb(27, 27, 27)',\n  'ansi-red': 'rgb(187, 86, 83)',\n  'ansi-green': 'rgb(144, 157, 98)',\n  'ansi-yellow': 'rgb(234, 193, 121)',\n  'ansi-blue': 'rgb(125, 169, 199)',\n  'ansi-magenta': 'rgb(176, 101, 151)',\n  'ansi-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-black': 'rgb(98, 98, 98)',\n  'ansi-bright-red': 'rgb(187, 86, 83)',\n  'ansi-bright-green': 'rgb(144, 157, 98)',\n  'ansi-bright-yellow': 'rgb(234, 193, 121)',\n  'ansi-bright-blue': 'rgb(125, 169, 199)',\n  'ansi-bright-magenta': 'rgb(176, 101, 151)',\n  'ansi-bright-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-white': 'rgb(247, 247, 247)'\n};\nfunction Ansi(_ref) {\n  var text = _ref.text,\n    style = _ref.style;\n  var commonWhitespaceLength = Infinity;\n  var parsedLines = text.split(/\\n/).map(function (line) {\n    return anser_1.default.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true\n    });\n  });\n  parsedLines.map(function (lines) {\n    var _lines$, _lines$$content, _match$;\n    var match = lines[2] && ((_lines$ = lines[2]) == null ? void 0 : (_lines$$content = _lines$.content) == null ? void 0 : _lines$$content.match(/^ +/));\n    var whitespaceLength = match && ((_match$ = match[0]) == null ? void 0 : _match$.length) || 0;\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n  var getText = function getText(content, key) {\n    if (key === 1) {\n      return content.replace(/\\| $/, ' ');\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n  return react_1.default.createElement(react_native_1.View, null, parsedLines.map(function (items, i) {\n    return react_1.default.createElement(react_native_1.View, {\n      style: styles.line,\n      key: i\n    }, items.map(function (bundle, key) {\n      var textStyle = bundle.fg && COLORS[bundle.fg] ? {\n        backgroundColor: bundle.bg && COLORS[bundle.bg],\n        color: bundle.fg && COLORS[bundle.fg]\n      } : {\n        backgroundColor: bundle.bg && COLORS[bundle.bg]\n      };\n      return react_1.default.createElement(react_native_1.Text, {\n        style: [style, textStyle],\n        key: key\n      }, getText(bundle.content, key));\n    }));\n  }));\n}\nexports.Ansi = Ansi;\nvar styles = react_native_1.StyleSheet.create({\n  line: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"names":["anser_1","__importDefault","require","react_1","react_native_1","COLORS","Ansi","_ref","text","style","commonWhitespaceLength","Infinity","parsedLines","split","map","line","default","ansiToJson","json","remove_empty","use_classes","lines","_lines$","_lines$$content","_match$","match","content","whitespaceLength","length","getText","key","replace","substr","createElement","View","items","i","styles","bundle","textStyle","fg","backgroundColor","bg","color","Text","exports","StyleSheet","create","flexDirection"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/@expo/metro-runtime/src/error-overlay/UI/AnsiHighlight.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Anser from 'anser';\nimport React from 'react';\nimport { StyleProp, StyleSheet, Text, TextStyle, View } from 'react-native';\n\n// Afterglow theme from https://iterm2colorschemes.com/\nconst COLORS: Record<string, string> = {\n  'ansi-black': 'rgb(27, 27, 27)',\n  'ansi-red': 'rgb(187, 86, 83)',\n  'ansi-green': 'rgb(144, 157, 98)',\n  'ansi-yellow': 'rgb(234, 193, 121)',\n  'ansi-blue': 'rgb(125, 169, 199)',\n  'ansi-magenta': 'rgb(176, 101, 151)',\n  'ansi-cyan': 'rgb(140, 220, 216)',\n  // Instead of white, use the default color provided to the component\n  // 'ansi-white': 'rgb(216, 216, 216)',\n  'ansi-bright-black': 'rgb(98, 98, 98)',\n  'ansi-bright-red': 'rgb(187, 86, 83)',\n  'ansi-bright-green': 'rgb(144, 157, 98)',\n  'ansi-bright-yellow': 'rgb(234, 193, 121)',\n  'ansi-bright-blue': 'rgb(125, 169, 199)',\n  'ansi-bright-magenta': 'rgb(176, 101, 151)',\n  'ansi-bright-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-white': 'rgb(247, 247, 247)',\n};\n\nexport function Ansi({ text, style }: { text: string; style: StyleProp<TextStyle> }) {\n  let commonWhitespaceLength = Infinity;\n  const parsedLines = text.split(/\\n/).map((line) =>\n    Anser.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true,\n    })\n  );\n\n  parsedLines.map((lines) => {\n    // The third item on each line includes the whitespace of the source code.\n    // We are looking for the least amount of common whitespace to trim all lines.\n    // Example: Array [\" \", \" 96 |\", \"     text\", ...]\n    const match = lines[2] && lines[2]?.content?.match(/^ +/);\n    const whitespaceLength = (match && match[0]?.length) || 0;\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n\n  const getText = (content: string, key: number) => {\n    if (key === 1) {\n      // Remove the vertical bar after line numbers\n      return content.replace(/\\| $/, ' ');\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      // Remove common whitespace at the beginning of the line\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n\n  return (\n    <View>\n      {parsedLines.map((items, i) => (\n        <View style={styles.line} key={i}>\n          {items.map((bundle, key) => {\n            const textStyle =\n              bundle.fg && COLORS[bundle.fg]\n                ? {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                    color: bundle.fg && COLORS[bundle.fg],\n                  }\n                : {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                  };\n            return (\n              <Text style={[style, textStyle]} key={key}>\n                {getText(bundle.content, key)}\n              </Text>\n            );\n          })}\n        </View>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  line: {\n    flexDirection: 'row',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}