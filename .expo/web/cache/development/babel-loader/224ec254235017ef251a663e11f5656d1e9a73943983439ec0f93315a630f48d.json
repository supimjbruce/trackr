{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\nvar getStateFromPath_1 = require(\"./fork/getStateFromPath\");\nfunction getRouteInfoFromState(getPathFromState, state, baseUrl) {\n  var _getPathFromState = getPathFromState(state, false),\n    path = _getPathFromState.path;\n  var qualified = getPathFromState(state, true);\n  return _objectSpread({\n    unstable_globalHref: path,\n    pathname: (0, getStateFromPath_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n    isIndex: isIndexPath(state)\n  }, getNormalizedStatePath(qualified, baseUrl));\n}\nexports.getRouteInfoFromState = getRouteInfoFromState;\nfunction isIndexPath(state) {\n  var _state$index;\n  var route = state.routes[(_state$index = state.index) != null ? _state$index : state.routes.length - 1];\n  if (route.state) {\n    return isIndexPath(route.state);\n  }\n  if (route.params && 'screen' in route.params) {\n    return route.params.screen === 'index';\n  }\n  return false;\n}\nfunction getNormalizedStatePath(_ref, baseUrl) {\n  var statePath = _ref.path,\n    params = _ref.params;\n  var _statePath$split = statePath.split('?'),\n    _statePath$split2 = _slicedToArray(_statePath$split, 1),\n    pathname = _statePath$split2[0];\n  return {\n    segments: (0, getStateFromPath_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n    params: Object.entries(params).reduce(function (prev, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n      if (Array.isArray(value)) {\n        prev[key] = value.map(function (v) {\n          try {\n            return decodeURIComponent(v);\n          } catch (_unused) {\n            return v;\n          }\n        });\n      } else {\n        try {\n          prev[key] = decodeURIComponent(value);\n        } catch (_unused2) {\n          prev[key] = value;\n        }\n      }\n      return prev;\n    }, {})\n  };\n}\nexports.getNormalizedStatePath = getNormalizedStatePath;","map":{"version":3,"names":["getStateFromPath_1","require","getRouteInfoFromState","getPathFromState","state","baseUrl","_getPathFromState","path","qualified","_objectSpread","unstable_globalHref","pathname","stripBaseUrl","split","isIndex","isIndexPath","getNormalizedStatePath","exports","_state$index","route","routes","index","length","params","screen","_ref","statePath","_statePath$split","_statePath$split2","_slicedToArray","segments","filter","Boolean","map","decodeURIComponent","Object","entries","reduce","prev","_ref2","_ref3","key","value","Array","isArray","v","_unused","_unused2"],"sources":["/Users/jonathanbruce/Coding/trackr/node_modules/expo-router/src/LocationProvider.tsx"],"sourcesContent":["import type { State } from './fork/getPathFromState';\nimport { stripBaseUrl } from './fork/getStateFromPath';\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport type UrlObject = {\n  unstable_globalHref: string;\n  pathname: string;\n  readonly params: SearchParams;\n  segments: string[];\n  isIndex: boolean;\n};\n\nexport function getRouteInfoFromState(\n  getPathFromState: (state: State, asPath: boolean) => { path: string; params: any },\n  state: State,\n  baseUrl?: string\n): UrlObject {\n  const { path } = getPathFromState(state, false);\n  const qualified = getPathFromState(state, true);\n\n  return {\n    // TODO: This may have a predefined origin attached in the future.\n    unstable_globalHref: path,\n    pathname: stripBaseUrl(path, baseUrl).split('?')['0'],\n    isIndex: isIndexPath(state),\n    ...getNormalizedStatePath(qualified, baseUrl),\n  };\n}\n\nfunction isIndexPath(state: State) {\n  const route = state.routes[state.index ?? state.routes.length - 1];\n  if (route.state) {\n    return isIndexPath(route.state);\n  }\n  // router.params is typed as 'object', so this usual syntax is to please TypeScript\n  if (route.params && 'screen' in route.params) {\n    return route.params.screen === 'index';\n  }\n  return false;\n}\n\n// TODO: Split up getPathFromState to return all this info at once.\nexport function getNormalizedStatePath(\n  {\n    path: statePath,\n    params,\n  }: {\n    path: string;\n    params: any;\n  },\n  baseUrl?: string\n): Pick<UrlObject, 'segments' | 'params'> {\n  const [pathname] = statePath.split('?');\n  return {\n    // Strip empty path at the start\n    segments: stripBaseUrl(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n    // TODO: This is not efficient, we should generate based on the state instead\n    // of converting to string then back to object\n    params: Object.entries(params).reduce((prev, [key, value]) => {\n      if (Array.isArray(value)) {\n        prev[key] = value.map((v: string) => {\n          try {\n            return decodeURIComponent(v);\n          } catch {\n            return v;\n          }\n        });\n      } else {\n        try {\n          prev[key] = decodeURIComponent(value as string);\n        } catch {\n          prev[key] = value as string;\n        }\n      }\n      return prev;\n    }, {} as SearchParams),\n  };\n}\n"],"mappings":";;;;;;;;;;AACA,IAAAA,kBAAA,GAAAC,OAAA;AAYA,SAAgBC,qBAAqBA,CACnCC,gBAAkF,EAClFC,KAAY,EACZC,OAAgB;EAEhB,IAAAC,iBAAA,GAAiBH,gBAAgB,CAACC,KAAK,EAAE,KAAK,CAAC;IAAvCG,IAAI,GAAAD,iBAAA,CAAJC,IAAI;EACZ,IAAMC,SAAS,GAAGL,gBAAgB,CAACC,KAAK,EAAE,IAAI,CAAC;EAE/C,OAAAK,aAAA;IAEEC,mBAAmB,EAAEH,IAAI;IACzBI,QAAQ,EAAE,IAAAX,kBAAA,CAAAY,YAAY,EAACL,IAAI,EAAEF,OAAO,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACrDC,OAAO,EAAEC,WAAW,CAACX,KAAK;EAAC,GACxBY,sBAAsB,CAACR,SAAS,EAAEH,OAAO,CAAC;AAEjD;AAfAY,OAAA,CAAAf,qBAAA,GAAAA,qBAAA;AAiBA,SAASa,WAAWA,CAACX,KAAY;EAAA,IAAAc,YAAA;EAC/B,IAAMC,KAAK,GAAGf,KAAK,CAACgB,MAAM,EAAAF,YAAA,GAACd,KAAK,CAACiB,KAAK,YAAAH,YAAA,GAAId,KAAK,CAACgB,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC;EAClE,IAAIH,KAAK,CAACf,KAAK,EAAE;IACf,OAAOW,WAAW,CAACI,KAAK,CAACf,KAAK,CAAC;;EAGjC,IAAIe,KAAK,CAACI,MAAM,IAAI,QAAQ,IAAIJ,KAAK,CAACI,MAAM,EAAE;IAC5C,OAAOJ,KAAK,CAACI,MAAM,CAACC,MAAM,KAAK,OAAO;;EAExC,OAAO,KAAK;AACd;AAGA,SAAgBR,sBAAsBA,CAAAS,IAAA,EAQpCpB,OAAgB;EAAA,IANRqB,SAAS,GAAAD,IAAA,CAAflB,IAAI;IACJgB,MAAM,GAAAE,IAAA,CAANF,MAAM;EAOR,IAAAI,gBAAA,GAAmBD,SAAS,CAACb,KAAK,CAAC,GAAG,CAAC;IAAAe,iBAAA,GAAAC,cAAA,CAAAF,gBAAA;IAAhChB,QAAQ,GAAAiB,iBAAA;EACf,OAAO;IAELE,QAAQ,EAAE,IAAA9B,kBAAA,CAAAY,YAAY,EAACD,QAAQ,EAAEN,OAAO,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACkB,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACC,kBAAkB,CAAC;IAG5FX,MAAM,EAAEY,MAAM,CAACC,OAAO,CAACb,MAAM,CAAC,CAACc,MAAM,CAAC,UAACC,IAAI,EAAAC,KAAA,EAAkB;MAAA,IAAAC,KAAA,GAAAX,cAAA,CAAAU,KAAA;QAAfE,GAAG,GAAAD,KAAA;QAAEE,KAAK,GAAAF,KAAA;MACtD,IAAIG,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QACxBJ,IAAI,CAACG,GAAG,CAAC,GAAGC,KAAK,CAACT,GAAG,CAAC,UAACY,CAAS,EAAI;UAClC,IAAI;YACF,OAAOX,kBAAkB,CAACW,CAAC,CAAC;WAC7B,CAAC,OAAAC,OAAA,EAAM;YACN,OAAOD,CAAC;;QAEZ,CAAC,CAAC;OACH,MAAM;QACL,IAAI;UACFP,IAAI,CAACG,GAAG,CAAC,GAAGP,kBAAkB,CAACQ,KAAe,CAAC;SAChD,CAAC,OAAAK,QAAA,EAAM;UACNT,IAAI,CAACG,GAAG,CAAC,GAAGC,KAAe;;;MAG/B,OAAOJ,IAAI;IACb,CAAC,EAAE,EAAkB;GACtB;AACH;AAnCArB,OAAA,CAAAD,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}